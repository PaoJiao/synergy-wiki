== Introduction ==

Before building you will need to install the [[#Dependencies|dependencies]]. To build, use the <code>hm</code> (or <code>./hm.sh</code>) script located the root of our project directory. This is just a wrapper for <code>cmake</code>, so you don't need to use it, however we recommend you do. The <code>conf</code> command will generate the projects in the <code>build</code> directory (which can be opened manually and used for compiling).

This guide is for Synergy version 1.3.5 and above. First you need to download the [[Source Code]]. To compile 1.3.4 and below, please refer to the [http://synergy2.sourceforge.net/compiling.html legacy compile guide] on the old website. Automake will no longer be used, which means, but you can still use the GNU style <code>./configure; make</code> command sequence (the <code>configure</code> script just calls cmake). CMake is *not* a replacement for <code>make</code> or Visual Studio; it doesn't compile source code, but it does generate project files (like Makefile, Visual Studio, and Xcode) much like the <code>configure</code> command.

The <code>-g1</code> argument (shown below) will cause the 1st CMake generator to be used; use the <code>hm genlist</code> command to see other generators. You may want to do this if you are building with Eclipse, for example.

With no extra arguments, release build will be compiled. If you need the debug release, use the <code>-d</code> argument.

=== Windows ===

<pre>
hm conf -g1
hm build
</pre>

=== Unix, Linux, Mac OS X ===

<pre>
./hm.sh conf -g1 [-d] # Use -d to build a debug version.
./hm.sh build [-d]
</pre>

After compiling the executables can be found in the <code>bin</code> directory in the root of the source tree (not in the build directory).

== Manual compiling ==

After configuring, if you want to build without using the <code>hm</code> script.

=== Unix Makefiles ===

<pre>
cd build/release # or build/debug if you configured with -d
make
</pre>

=== Visual Studio ===

# Open the <code>build</code> directory.
# Double click: <code>synergy.sln</code>
# Click <code>Build</code> from the menu, then click <code>Build Solution</code>.

=== Xcode ===

Run:

 ./hm.sh conf -g2

to create <code>synergy.xcodeproj</code>, then:

# Open the <code>build</code> directory.
# Double click: <code>synergy.xcodeproj</code>
# Click <code>Build</code> from the menu, then click <code>Build</code>.

'''Tip:''' To build for a different version of OS X than the one you are on, go to Project, Edit Project Settings, Build.  There you can change settings for Intel/PPC, 32/64-bit, and OS X version (scroll down for OS X version).  Release builds should be 32-bit Universal, with base SDK 10.5.

=== Other IDEs ===

Windows users can download a free version of [http://www.microsoft.com/express/vc/ Visual C++ Express 2008], which can open the Visual Studio 2008 files generated by CMake. Other supported project types are [http://www.codeblocks.org/ Code::Blocks], [http://www.eclipse.org/cdt/ Eclipse CDT], and [http://www.mingw.org/. MinGW]

For Mac OS X users, although [//developer.apple.com/technology/xcode.html Xcode] isn't necessary for compiling on Mac OS X (you can just use Unix Makefiles), it is a neat IDE and very widely used (and it's free). There others, such as [http://www.codeblocks.org/ Code::Blocks] and [http://www.eclipse.org/cdt/ Eclipse CDT] which (apparently) work on Mac OS X.

=== Building installers ===

Use the <code>hm package</code> command to build installers. Of course you can only build those that are applicable for your platform.

== Dependencies ==

=== Windows ===

==== Windows XP (and above) ====

* [http://www.microsoft.com/express/vc/ Visual C++ Express 2008] (or VC++ 6.0 and above)
* [http://www.cmake.org/cmake/resources/software.html CMake]
* [http://www.python.org/download/ Python]
* [http://synergy-foss.org/mirror/qt-sdk-win-opensource-2010.02.exe Qt SDK 2010.02] (provides qmake and MinGW used for building the GUI. Note: use the MinGW version provided with Qt as a mismatch can cause random crashes)
* [http://wixtoolset.org/ Wix] v3.8 (for building the windows installer, since Synergy version 1.4.17)

You may need to add your Python install directory to the end of your PATH environment variable (System > Advanced System Settings > Environment Variables) so that <code>hm</code> can be called from the command prompt.

Using Python 3.x will result in syntax errors as print became a function rather than a statement:
[http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function What's new in Python 3.0]

===== Windows x64 =====

* All dependencies required for Windows x86
* Visual Studio 2008 (x64) *SP1* or Visual Studio 2005 (x64) *SP1*
* 64-bit compiler extensions installed (you may need to re-run Visual Studio setup)

=== Mac OS X ===

==== Mac OS X 10.10 Yosemite ====

* Install cmake and Qt as usual (e.g. using brew):
<pre>
brew install cmake
brew install qt
</pre>
* Fix <code>./ext/toolchain/commands1.py</code>:

In the function configure_core(), at approx line 433, change 

<code>elif sys.platform == "darwin": </code> to read <code>if sys.platform == "darwin":</code>

In the function macPostGuiMake(), at approx line 770 and/or 773 change the path to be what your Qt library path is, probably, 

<code>frameworkRootDir = "/usr/local/Cellar/qt/4.8.7/Frameworks"</code>

See [https://github.com/synergy/synergy/issues/4572 this github issue] for more information.

* Now configure and build:
<pre>
./hm.sh conf -g1 --mac-sdk 10.10 --mac-identity test
./hm.sh build
</pre>

Credits to [https://wordpress.update.sh/archives/410 this blog entry]

==== Mac OS X 10.9 Mavericks ====

[http://www.computersnyou.com/2025/2013/06/install-command-line-tools-in-osx-10-9-mavericks-how-to/ Install Command Line Tools In OSX 10.9 Mavericks]

==== Mac OS X 10.4 (and above) ====

* [http://developer.apple.com/technology/xcode.html XCode] (*with command line tools)
* [http://synergy-foss.org/mirror/qt-sdk-mac-opensource-2010.03.dmg Qt SDK 2010.03] (provides qmake)

To install the command line tools, Xcode > Preferences > Downloads and install component named "Command Line Tools".

If you are missing the <code>/Developer</code> directory, you may need to run (assuming the path is correct):

<pre>
mkdir /Developer
cd /Developer
ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Library
ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/SDKs
</pre>

'''Note:''' For Mac OS X 10.5 and above, Python should already be installed. Otherwise, visit the [http://www.cmake.org/cmake/resources/software.html CMake] and [http://www.python.org/download/ Python] download pages.

'''Note:''' Upgrading Mac OS X may cause the command line tools and Qt libraries to be removed (even on minor upgrades), so you may have to reinstall both each time after doing this.

==== Using "brew" method ====

[http://mxcl.github.com/homebrew/ Brew] for Mac OS X is an alternative to MacPorts and Fink.
<pre>
brew install cmake
</pre>

==== Using "macports" method ====

If you already have [http://www.macports.org/install.php MacPorts], run:

<pre>
sudo port install cmake
</pre>

=== Ubuntu 10.04 LTS ===

<pre>
sudo apt-get install cmake make g++ xorg-dev libqt4-dev libcurl4-openssl-dev libavahi-compat-libdnssd-dev libssl-dev
</pre>

=== Ubuntu 15.04 ===

<pre>
sudo apt-get install cmake make g++ xorg-dev libqt4-dev libcurl4-openssl-dev libavahi-compat-libdnssd-dev libssl-dev
</pre>

=== CentOS 6.5 ===

<pre>
su
yum install cmake make gcc-c++ libX11-devel libXext-devel libXi-devel libXtst-devel libXinerama-devel libcurl-devel qt-devel avahi-compat-libdns_sd-devel openssl-devel
PATH="$PATH:/usr/lib64/qt4/bin:/usr/lib/qt4/bin"
</pre>

=== Fedora 20 ===

<pre>
sudo yum install cmake make gcc-c++ libX11-devel libXtst-devel libXext-devel libXinerama-devel libcurl-devel qt-devel avahi-compat-libdns_sd-devel openssl-devel
PATH="$PATH:/usr/lib64/qt4/bin:/usr/lib/qt4/bin"
</pre>

=== OpenSUSE 11.1 ===

<pre>
su
yast2 -i cmake python gcc-c++ xorg-x11-devel libcurl-devel (SSL dev package, not sure what it's called on SuSE)
</pre>

=== Mandriva One 2009 ===

<pre>
su
urpmi cmake python gcc-c++ make xorg-x11-dev libcurl-dev (SSL dev package, not sure what it's called on Mandriva)
</pre>

=== OpenSolaris 2009.06 ===

<pre>
su
pkg install SUNWPython SUNWcmake SUNWgcc SUNWxorg-headers SUNWxwinc libcurl-devel (SSL dev package, not sure what it's called on Solaris)
</pre>

=== Unix or other Linux ===

* CMake
* Python
* GNU Make
* GCC (2.95 and up)
* X11R4 and up (headers and libraries)
* Xtst (e.g. libXtst-devel)
* Qt 2010.03
* libCURL
* SSL dev package
