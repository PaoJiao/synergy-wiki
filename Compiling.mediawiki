==Introduction==

This guide is for Synergy version 1.3.5 and above. First you need to cloune the [[Source Code]] from our GitHub repo, then install the [[Compiling#dependencies|dependencies]], and finally, follow the [[Compiling#Compile|compile instructions]].

==Dependencies==

===Windows x86===

These are for Windows XP SP3 (the earliest Windows supported) and above.

* Visual Studio 2010
* Qt 5.6
* [http://www.cmake.org/cmake/resources/software.html CMake 2.8]
* [http://www.python.org/download/ Python 2.x]
* [http://wixtoolset.org/releases/ Wix v3.8]
* [https://developer.apple.com/download/more/?q=Bonjour%20SDK%20for%20Windows Bonjour SDK for Windows]
* Command line [https://git-scm.com/downloads git] in your PATH.

You may need to add your Python install directory to the end of your PATH environment variable <pre>(System --> Advanced System Settings --> Environment Variables)</pre> so that <code>hm</code> can be called from the command prompt.

Using Python 3.x will result in syntax errors as print became a function rather than a statement: [http://docs.python.org/3.0/whatsnew/3.0.html#print-is-a-function What's new in Python 3.0]

Note: If you want to change the installed directory of Bonjour SDK, please double check the BONJOUR_SDK_HOME environment variable after installation.

Note: You may need to add your QT directory to your PATH environment variable, especially for the qmake and mingw32-make. make sure:
* add X:\Qt\5.6\mingw49_32\bin;X:\Qt\Tools\mingw492_32\bin into the Path.
Note: You may need to set your <code>QMAKESPEC</code> environmental variable. the correct value for this is <code>X:\Qt\5.6\mingw49_32\mkspecs\win32-g++</code>

===Windows 64-bit===

* All dependencies required for [[Compiling#Windows_x86|Windows x86]]

===Mac OS X===

====Mac OS X 10.10 and above====
* Install [http://brew.sh/ Homebrew]
* Install [https://developer.apple.com/xcode/download/ XCode] (also available via the Mac App Store)
** You may need to open XCode, go to Preferences, select Locations, and then make sure an option is selected for Command Line Tools.
* Install cmake and Qt using Homebrew
```
brew install cmake
brew install qt
```
* Fix "./ext/toolchain/commands1.py"
** In the function <code>macPostGuiMake()</code> at approx line 781 change the path of <code>frameworkRootDir</code> to be what your Qt library path is, something like:
*** <code>frameworkRootDir = "/usr/local/Cellar/qt/4.8.7_2/Frameworks"</code>
** See [https://github.com/symless/synergy/issues/4572 this] github issue for more information.
* Now configure and build - if running El Capitan, change the mac-sdk parameter below from <code>10.10</code> to <code>10.11</code> or as applicable from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/

```
./hm.sh conf -g2 --mac-sdk 10.10 --mac-identity test
./hm.sh build
./hm.sh dist mac
```

Credits to [https://wordpress.update.sh/archives/410 this blog entry]

====Mac OS X 10.9 Mavericks====

[http://www.computersnyou.com/2025/2013/06/install-command-line-tools-in-osx-10-9-mavericks-how-to/ Install Command Line Tools In OSX 10.9 Mavericks]

====Mac OS X 10.4 through 10.8.x====
* [https://developer.apple.com/xcode/download/ XCode] (with command line tools. Make sure to download the Xcode version for your OS X version, e.g Xcode 3.1.4 for 10.5)
* [http://download.qt.io/archive/qt/4.6/qt-mac-opensource-4.6.3.dmg.mirrorlist Qt SDK 2010.03] (provides qmake)

To install the command line tools: <pre> Xcode --> Preferences --> Downloads and install ''Command Line Tools''.</pre>

If you are missing the ''/Developer'' directory, you may need to run (assuming the path is correct):
 mkdir /Developer
 cd /Developer
 ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Library
 ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/SDKs

'''Note:''' For Mac OS X 10.5 and above, Python should already be installed. Otherwise, visit the [http://www.cmake.org/cmake/resources/software.html CMake] and [http://www.python.org/download/ Python] download pages.

'''Note:''' Upgrading Mac OS X may cause the command line tools and Qt libraries to be removed (even on minor upgrades), so you may have to reinstall both each time after doing this.

====Using “brew” method====

[http://mxcl.github.com/homebrew/ Brew] for Mac OS X is an alternative to MacPorts and Fink.
 brew install cmake

====Using “macports” method====
If you already have [MacPorts], run:
 sudo port install cmake

===Ubuntu 10.04 to 15.10===
 sudo apt-get install cmake make g++ xorg-dev libqt4-dev libcurl4-openssl-dev libavahi-compat-libdnssd-dev libssl-dev libx11-dev

===CentOS 6/7===
 sudo yum install cmake make gcc-c++ libX11-devel libXext-devel libXi-devel libXtst-devel libXinerama-devel libcurl-devel qt-devel avahi-compat-libdns_sd-devel openssl-devel rpm-build rpmlint
 PATH="$PATH:/usr/lib64/qt4/bin:/usr/lib/qt4/bin"

After compiling, run the following to build and install the RPM:
  ./hm.sh package rpm
  sudo rpm -i bin/synergy-master-*.rpm 

===Debian 7/8===
  sudo apt-get install build-essential cmake libavahi-compat-libdnssd-dev libcurl4-openssl-dev libssl-dev lintian python qt4-dev-tools xorg-dev fakeroot

===Fedora 20===
 sudo yum install cmake make gcc-c++ libX11-devel libXtst-devel libXext-devel libXinerama-devel libcurl-devel qt-devel avahi-compat-libdns_sd-devel openssl-devel rpm-build rpmlint
 PATH="$PATH:/usr/lib64/qt4/bin:/usr/lib/qt4/bin"

===OpenSUSE 11.1===
 su
 yast2 -i cmake python gcc-c++ xorg-x11-devel libcurl-devel libopenssl-devel

===Mandriva One 200===
 su
 urpmi cmake python gcc-c++ make xorg-x11-dev libcurl-dev (SSL dev package, not sure what it's called on Mandriva)

===OpenSolaris 2009.06===
 su
 pkg install SUNWPython SUNWcmake SUNWgcc SUNWxorg-headers SUNWxwinc libcurl-devel
(''libcurl-devel'' or SSL dev package, not sure what it's called on Solaris)

===Unix or other Linux===
* CMake
* Python
* GNU Make
* GCC (2.95 and up)
* X11R4 and up (headers and libraries)
* Xtst (e.g. libXtst-devel)
* Qt 2010.03
* libCURL
* SSL dev package

==Compile==

Use the <code>hm</code> (or <code>./hm.sh</code>) script located the root of our project directory. This is just a wrapper for <code>cmake</code>, so you don't need to use it, however we recommend you do. The <code>conf</code> command will generate the projects in the ''build'' directory (which can be opened manually and used for compiling).

Use the <code>hm genlist</code> command to see other generators. The <code>-g1</code> argument (shown below) will cause the 1st ''CMake'' generator to be used. You may want to use other generators if you are building with ''Eclipse'', for example.

With no extra arguments, release build will be compiled. If you need the debug version, use the <code>-d</code> argument.

===Windows===
 hm conf -g1
 hm build

===Unix and Linux===
 git clone https://github.com/symless/synergy.git
 cd synergy
 # optionally add '-d' to build a debug version.
 QT_SELECT=4 ./hm.sh conf -g1 
 ./hm.sh build [-d]
 # optionally build a package if you wish to install it system-wide with a package manager instead of running from the cli
 ./hm.sh package deb
 sudo dpkg -i ./bin/synergy-master-stable-ec56ac4-Linux-x86_64.deb
 # to run it successfully, you will need to create a configuration file
 ./bin/synergy &
 # or 
 synergy & (if you created and installed the package)

===Mac OS X===
 ./hm.sh conf -g1 [-d] --mac-sdk 10.11 --mac-identity Yosemite # Use -d to build a debug version and replace 10.11 / Yosemite with correct versions of your setup.
 ./hm.sh build [-d]
 ./hm.sh dist mac

Note: This project uses Qt4. If you have multiple versions of Qt installed, your system will default to the newest one. If that is Qt5, you can override this by specifying the env variable QT_SELECT=4, like so:

QT_SELECT=4 ./hm.sh conf -g1

After compiling, the binaries can be found in the ''bin'' directory in the root of the source tree (not in the build directory).

==Building installers==
Use the <code>hm package [os]</code> command to build installers. (<code>[os] = {deb,mac,rpm,win}</code>)

On Windows the [http://wixtoolset.org/ WiX Toolset] is required.
Note: On Windows, when using Visual C++ 2010 Express, it does not provide the Merge Module needed for packaging.